{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48],"program":"C:\\Users\\wesle\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","lzw","C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lzw-0.10.0\\src\\lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"raii_no_panic\"","-C","metadata=d0bef173ac062667","-C","extra-filename=-d0bef173ac062667","--out-dir","c:\\dev\\rusty_chip8\\target\\rls\\debug\\deps","-L","dependency=c:\\dev\\rusty_chip8\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\wesle\\.rustup/toolchains/nightly-x86_64-pc-windows-msvc"],"output":[99,58,92,100,101,118,92,114,117,115,116,121,95,99,104,105,112,56,92,116,97,114,103,101,116,92,114,108,115,92,100,101,98,117,103,92,100,101,112,115,92,108,105,98,108,122,119,45,100,48,98,101,102,49,55,51,97,99,48,54,50,54,54,55,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"lzw","disambiguator":[2428387254264555289,12121058819620401409]},"crate_root":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lzw-0.10.0\\src","external_crates":[{"file_name":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lzw-0.10.0\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[3784487664057646013,678548526651553166]}},{"file_name":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lzw-0.10.0\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[1505932620191740712,11960304689474218604]}},{"file_name":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lzw-0.10.0\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[2202162966358352520,1540765826685291309]}},{"file_name":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lzw-0.10.0\\src\\lib.rs","num":4,"id":{"name":"alloc","disambiguator":[12552742427542554725,7527797743935281662]}},{"file_name":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lzw-0.10.0\\src\\lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[12920973381183166857,17954846533137630814]}},{"file_name":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lzw-0.10.0\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[6208075755453667876,3365686514671849673]}},{"file_name":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lzw-0.10.0\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3065543516588579103,11955528504649856325]}},{"file_name":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lzw-0.10.0\\src\\lib.rs","num":8,"id":{"name":"panic_unwind","disambiguator":[10971241147940616326,6897541715392330182]}}],"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":0,"byte_end":1119,"line_start":1,"line_end":43,"column_start":1,"column_end":3}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":168},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":936,"byte_end":943,"line_start":29,"line_end":29,"column_start":5,"column_end":12},"alias_span":null,"name":"Decoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":174},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":949,"byte_end":967,"line_start":30,"line_end":30,"column_start":5,"column_end":23},"alias_span":null,"name":"DecoderEarlyChange","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":74},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":973,"byte_end":980,"line_start":31,"line_end":31,"column_start":5,"column_end":12},"alias_span":null,"name":"Encoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":72},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":986,"byte_end":992,"line_start":32,"line_end":32,"column_start":5,"column_end":11},"alias_span":null,"name":"encode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":96},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1022,"byte_end":1031,"line_start":36,"line_end":36,"column_start":5,"column_end":14},"alias_span":null,"name":"BitReader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":100},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1037,"byte_end":1046,"line_start":37,"line_end":37,"column_start":5,"column_end":14},"alias_span":null,"name":"BitWriter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":188},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1052,"byte_end":1061,"line_start":38,"line_end":38,"column_start":5,"column_end":14},"alias_span":null,"name":"LsbReader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":200},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1067,"byte_end":1076,"line_start":39,"line_end":39,"column_start":5,"column_end":14},"alias_span":null,"name":"LsbWriter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":194},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1082,"byte_end":1091,"line_start":40,"line_end":40,"column_start":5,"column_end":14},"alias_span":null,"name":"MsbReader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":212},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1097,"byte_end":1106,"line_start":41,"line_end":41,"column_start":5,"column_end":14},"alias_span":null,"name":"MsbWriter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":94},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":1112,"byte_end":1116,"line_start":42,"line_end":42,"column_start":5,"column_end":9},"alias_span":null,"name":"Bits","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,108,105,98,46,114,115],"byte_start":0,"byte_end":1119,"line_start":1,"line_end":43,"column_start":1,"column_end":3},"name":"","qualname":"::","value":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\lzw-0.10.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":86},{"krate":0,"index":124},{"krate":0,"index":134}],"decl_id":null,"docs":" # LZW decoder and encoder","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":168},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,108,122,119,46,114,115],"byte_start":8284,"byte_end":8291,"line_start":215,"line_end":215,"column_start":5,"column_end":12},"name":"Decoder","qualname":"::lzw::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":85},{"krate":0,"index":87},{"krate":0,"index":89},{"krate":0,"index":93},{"krate":0,"index":95},{"krate":0,"index":97},{"krate":0,"index":99}],"decl_id":null,"docs":"Decoder for a LZW compressed stream (this algorithm is used for GIF files).\n \n The maximum supported code size is 16 bits. The decoder assumes two\n special code word to be present in the stream:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,108,122,119,46,114,115],"byte_start":5191,"byte_end":5194,"line_start":135,"line_end":135,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder<R>>::new","value":"fn (reader: R, min_code_size: u8) -> Decoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new LZW decoder. \n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,108,122,119,46,114,115],"byte_start":5779,"byte_end":5791,"line_start":152,"line_end":152,"column_start":12,"column_end":24},"name":"decode_bytes","qualname":"<Decoder<R>>::decode_bytes","value":"fn (&mut self, bytes: &[u8]) -> io::Result<(usize, &[u8])>","parent":null,"children":[],"decl_id":null,"docs":" Tries to obtain and decode a code word from `bytes`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":174},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,108,122,119,46,114,115],"byte_start":8388,"byte_end":8406,"line_start":216,"line_end":216,"column_start":5,"column_end":23},"name":"DecoderEarlyChange","qualname":"::lzw::DecoderEarlyChange","value":"DecoderEarlyChange {  }","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":107},{"krate":0,"index":109},{"krate":0,"index":111},{"krate":0,"index":115},{"krate":0,"index":117},{"krate":0,"index":119},{"krate":0,"index":121}],"decl_id":null,"docs":"Decoder for a LZW compressed stream using an “early change” algorithm (used in TIFF files).\n \n The maximum supported code size is 16 bits. The decoder assumes two\n special code word to be present in the stream:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,108,122,119,46,114,115],"byte_start":5191,"byte_end":5194,"line_start":135,"line_end":135,"column_start":12,"column_end":15},"name":"new","qualname":"<DecoderEarlyChange<R>>::new","value":"fn (reader: R, min_code_size: u8) -> DecoderEarlyChange<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new LZW decoder. \n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,108,122,119,46,114,115],"byte_start":5779,"byte_end":5791,"line_start":152,"line_end":152,"column_start":12,"column_end":24},"name":"decode_bytes","qualname":"<DecoderEarlyChange<R>>::decode_bytes","value":"fn (&mut self, bytes: &[u8]) -> io::Result<(usize, &[u8])>","parent":null,"children":[],"decl_id":null,"docs":" Tries to obtain and decode a code word from `bytes`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":72},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,108,122,119,46,114,115],"byte_start":11132,"byte_end":11138,"line_start":322,"line_end":322,"column_start":8,"column_end":14},"name":"encode","qualname":"::lzw::encode","value":"fn <R, W> (r: R, mut w: W, min_code_size: u8) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Convenience function that reads and compresses all bytes from `R`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":74},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,108,122,119,46,114,115],"byte_start":12610,"byte_end":12617,"line_start":365,"line_end":365,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::lzw::Encoder","value":"Encoder {  }","parent":null,"children":[{"krate":0,"index":39},{"krate":0,"index":41},{"krate":0,"index":43},{"krate":0,"index":45},{"krate":0,"index":47}],"decl_id":null,"docs":" LZW encoder using the algorithm of GIF files.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,108,122,119,46,114,115],"byte_start":12984,"byte_end":12987,"line_start":378,"line_end":378,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder<W>>::new","value":"fn (mut w: W, min_code_size: u8) -> io::Result<Encoder<W>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new LZW encoder.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,108,122,119,46,114,115],"byte_start":13741,"byte_end":13753,"line_start":399,"line_end":399,"column_start":12,"column_end":24},"name":"encode_bytes","qualname":"<Encoder<W>>::encode_bytes","value":"fn (&mut self, bytes: &[u8]) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Compresses `bytes` and writes the result into the writer.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":53},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,98,105,116,115,116,114,101,97,109,46,114,115],"byte_start":16638,"byte_end":16642,"line_start":9,"line_end":9,"column_start":5,"column_end":9},"name":"Some","qualname":"::bitstream::Bits::Some","value":"Bits::Some(usize, u16)","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":" Consumed bytes, reconstructed bits\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":59},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,98,105,116,115,116,114,101,97,109,46,114,115],"byte_start":16683,"byte_end":16687,"line_start":11,"line_end":11,"column_start":5,"column_end":9},"name":"None","qualname":"::bitstream::Bits::None","value":"Bits::None(usize)","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":" Consumed bytes\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":94},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,98,105,116,115,116,114,101,97,109,46,114,115],"byte_start":16584,"byte_end":16588,"line_start":7,"line_end":7,"column_start":10,"column_end":14},"name":"Bits","qualname":"::bitstream::Bits","value":"Bits::{Some, None}","parent":null,"children":[{"krate":0,"index":53},{"krate":0,"index":59}],"decl_id":null,"docs":" Containes either the consumed bytes and reconstructed bits or\n only the consumed bytes if the supplied buffer was not bit enough\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":96},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,98,105,116,115,116,114,101,97,109,46,114,115],"byte_start":16727,"byte_end":16736,"line_start":15,"line_end":15,"column_start":11,"column_end":20},"name":"BitReader","qualname":"::bitstream::BitReader","value":"BitReader","parent":null,"children":[{"krate":0,"index":98}],"decl_id":null,"docs":" A bit reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,98,105,116,115,116,114,101,97,109,46,114,115],"byte_start":16781,"byte_end":16790,"line_start":17,"line_end":17,"column_start":8,"column_end":17},"name":"read_bits","qualname":"::bitstream::BitReader::read_bits","value":"fn (&mut self, buf: &[u8], n: u8) -> Bits","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" Returns the next `n` bits.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":100},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,98,105,116,115,116,114,101,97,109,46,114,115],"byte_start":16861,"byte_end":16870,"line_start":21,"line_end":21,"column_start":11,"column_end":20},"name":"BitWriter","qualname":"::bitstream::BitWriter","value":"BitWriter: Write","parent":null,"children":[{"krate":0,"index":102}],"decl_id":null,"docs":" A bit writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,98,105,116,115,116,114,101,97,109,46,114,115],"byte_start":16921,"byte_end":16931,"line_start":23,"line_end":23,"column_start":8,"column_end":18},"name":"write_bits","qualname":"::bitstream::BitWriter::write_bits","value":"fn (&mut self, v: u16, n: u8) -> io::Result<()>","parent":{"krate":0,"index":100},"children":[],"decl_id":null,"docs":" Writes the next `n` bits.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":188},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,98,105,116,115,116,114,101,97,109,46,114,115],"byte_start":17401,"byte_end":17410,"line_start":59,"line_end":59,"column_start":5,"column_end":14},"name":"LsbReader","qualname":"::bitstream::LsbReader","value":"LsbReader {  }","parent":null,"children":[{"krate":0,"index":125},{"krate":0,"index":127}],"decl_id":null,"docs":"Reads bits from a byte stream, LSB first.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,98,105,116,115,116,114,101,97,109,46,114,115],"byte_start":17239,"byte_end":17242,"line_start":43,"line_end":43,"column_start":12,"column_end":15},"name":"new","qualname":"<LsbReader>::new","value":"fn () -> LsbReader","parent":null,"children":[],"decl_id":null,"docs":" Creates a new bit reader\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":194},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,98,105,116,115,116,114,101,97,109,46,114,115],"byte_start":17470,"byte_end":17479,"line_start":60,"line_end":60,"column_start":5,"column_end":14},"name":"MsbReader","qualname":"::bitstream::MsbReader","value":"MsbReader {  }","parent":null,"children":[{"krate":0,"index":129},{"krate":0,"index":131}],"decl_id":null,"docs":"Reads bits from a byte stream, MSB first.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,98,105,116,115,116,114,101,97,109,46,114,115],"byte_start":17239,"byte_end":17242,"line_start":43,"line_end":43,"column_start":12,"column_end":15},"name":"new","qualname":"<MsbReader>::new","value":"fn () -> MsbReader","parent":null,"children":[],"decl_id":null,"docs":" Creates a new bit reader\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":200},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,98,105,116,115,116,114,101,97,109,46,114,115],"byte_start":20282,"byte_end":20291,"line_start":175,"line_end":175,"column_start":5,"column_end":14},"name":"LsbWriter","qualname":"::bitstream::LsbWriter","value":"LsbWriter {  }","parent":null,"children":[{"krate":0,"index":135},{"krate":0,"index":137},{"krate":0,"index":139}],"decl_id":null,"docs":"Writes bits to a byte stream, LSB first.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,98,105,116,115,116,114,101,97,109,46,114,115],"byte_start":19389,"byte_end":19408,"line_start":128,"line_end":128,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,98,105,116,115,116,114,101,97,109,46,114,115],"byte_start":19573,"byte_end":19576,"line_start":138,"line_end":138,"column_start":12,"column_end":15},"name":"new","qualname":"<LsbWriter<W>>::new","value":"fn (writer: W) -> LsbWriter<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new bit reader\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,98,105,116,115,116,114,101,97,109,46,114,115],"byte_start":19542,"byte_end":19561,"line_start":137,"line_end":137,"column_start":5,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":212},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,98,105,116,115,116,114,101,97,109,46,114,115],"byte_start":20350,"byte_end":20359,"line_start":176,"line_end":176,"column_start":5,"column_end":14},"name":"MsbWriter","qualname":"::bitstream::MsbWriter","value":"MsbWriter {  }","parent":null,"children":[{"krate":0,"index":147},{"krate":0,"index":149},{"krate":0,"index":151}],"decl_id":null,"docs":"Writes bits to a byte stream, MSB first.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,98,105,116,115,116,114,101,97,109,46,114,115],"byte_start":19389,"byte_end":19408,"line_start":128,"line_end":128,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,98,105,116,115,116,114,101,97,109,46,114,115],"byte_start":19573,"byte_end":19576,"line_start":138,"line_end":138,"column_start":12,"column_end":15},"name":"new","qualname":"<MsbWriter<W>>::new","value":"fn (writer: W) -> MsbWriter<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new bit reader\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,98,105,116,115,116,114,101,97,109,46,114,115],"byte_start":19542,"byte_end":19561,"line_start":137,"line_end":137,"column_start":5,"column_end":24}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,108,122,119,46,114,115],"byte_start":1898,"byte_end":1910,"line_start":29,"line_end":29,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,108,122,119,46,114,115],"byte_start":8630,"byte_end":8634,"line_start":226,"line_end":226,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,108,122,119,46,114,115],"byte_start":8931,"byte_end":8943,"line_start":245,"line_end":245,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,108,122,119,46,114,115],"byte_start":12752,"byte_end":12759,"line_start":373,"line_end":373,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,108,122,119,46,114,115],"byte_start":14906,"byte_end":14913,"line_start":432,"line_end":432,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,98,105,116,115,116,114,101,97,109,46,114,115],"byte_start":17557,"byte_end":17566,"line_start":63,"line_end":63,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,98,105,116,115,116,114,101,97,109,46,114,115],"byte_start":18415,"byte_end":18424,"line_start":92,"line_end":92,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,98,105,116,115,116,114,101,97,109,46,114,115],"byte_start":20446,"byte_end":20455,"line_start":179,"line_end":179,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,98,105,116,115,116,114,101,97,109,46,114,115],"byte_start":20801,"byte_end":20810,"line_start":195,"line_end":195,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,108,122,119,46,114,115],"byte_start":1898,"byte_end":1910,"line_start":29,"line_end":29,"column_start":6,"column_end":18},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":150},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,108,122,119,46,114,115],"byte_start":8630,"byte_end":8634,"line_start":226,"line_end":226,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":46},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,108,122,119,46,114,115],"byte_start":8931,"byte_end":8943,"line_start":245,"line_end":245,"column_start":6,"column_end":18},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":52},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,108,122,119,46,114,115],"byte_start":12752,"byte_end":12759,"line_start":373,"line_end":373,"column_start":20,"column_end":27},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":74},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,108,122,119,46,114,115],"byte_start":14906,"byte_end":14913,"line_start":432,"line_end":432,"column_start":29,"column_end":36},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":74},"to":{"krate":2,"index":1926}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,98,105,116,115,116,114,101,97,109,46,114,115],"byte_start":16872,"byte_end":16877,"line_start":21,"line_end":21,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":4256},"to":{"krate":0,"index":100}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,98,105,116,115,116,114,101,97,109,46,114,115],"byte_start":17557,"byte_end":17566,"line_start":63,"line_end":63,"column_start":20,"column_end":29},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":188},"to":{"krate":0,"index":96}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,98,105,116,115,116,114,101,97,109,46,114,115],"byte_start":18415,"byte_end":18424,"line_start":92,"line_end":92,"column_start":20,"column_end":29},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":194},"to":{"krate":0,"index":96}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,98,105,116,115,116,114,101,97,109,46,114,115],"byte_start":20446,"byte_end":20455,"line_start":179,"line_end":179,"column_start":30,"column_end":39},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":200},"to":{"krate":0,"index":100}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,108,122,119,45,48,46,49,48,46,48,92,115,114,99,92,98,105,116,115,116,114,101,97,109,46,114,115],"byte_start":20801,"byte_end":20810,"line_start":195,"line_end":195,"column_start":30,"column_end":39},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":212},"to":{"krate":0,"index":100}}]}