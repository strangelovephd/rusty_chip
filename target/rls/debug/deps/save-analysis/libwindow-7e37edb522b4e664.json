{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48],"program":"C:\\Users\\wesle\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","window","C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.30.0\\src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=7e37edb522b4e664","-C","extra-filename=-7e37edb522b4e664","--out-dir","c:\\dev\\rusty_chip8\\target\\rls\\debug\\deps","-L","dependency=c:\\dev\\rusty_chip8\\target\\rls\\debug\\deps","--extern","input=c:\\dev\\rusty_chip8\\target\\rls\\debug\\deps\\libinput-6353f545f63d4ec9.rmeta","--extern","shader_version=c:\\dev\\rusty_chip8\\target\\rls\\debug\\deps\\libshader_version-66d543f71c85e852.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\wesle\\.rustup/toolchains/nightly-x86_64-pc-windows-msvc"],"output":[99,58,92,100,101,118,92,114,117,115,116,121,95,99,104,105,112,56,92,116,97,114,103,101,116,92,114,108,115,92,100,101,98,117,103,92,100,101,112,115,92,108,105,98,119,105,110,100,111,119,45,55,101,51,55,101,100,98,53,50,50,98,52,101,54,54,52,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"window","disambiguator":[5261885508199501864,1125005483562069251]},"crate_root":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.30.0\\src","external_crates":[{"file_name":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.30.0\\src/lib.rs","num":1,"id":{"name":"std","disambiguator":[3784487664057646013,678548526651553166]}},{"file_name":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.30.0\\src/lib.rs","num":2,"id":{"name":"core","disambiguator":[1505932620191740712,11960304689474218604]}},{"file_name":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.30.0\\src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[2202162966358352520,1540765826685291309]}},{"file_name":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.30.0\\src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[12552742427542554725,7527797743935281662]}},{"file_name":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.30.0\\src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[12920973381183166857,17954846533137630814]}},{"file_name":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.30.0\\src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6208075755453667876,3365686514671849673]}},{"file_name":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.30.0\\src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3065543516588579103,11955528504649856325]}},{"file_name":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.30.0\\src/lib.rs","num":8,"id":{"name":"panic_unwind","disambiguator":[10971241147940616326,6897541715392330182]}},{"file_name":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.30.0\\src/lib.rs","num":9,"id":{"name":"shader_version","disambiguator":[12198567766271585592,2351603164330548540]}},{"file_name":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.30.0\\src/lib.rs","num":10,"id":{"name":"input","disambiguator":[16090056163217061670,240522498352856326]}},{"file_name":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.30.0\\src/lib.rs","num":11,"id":{"name":"bitflags","disambiguator":[932588675569215380,18044398407288317282]}},{"file_name":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.30.0\\src/lib.rs","num":12,"id":{"name":"serde_derive","disambiguator":[7037000035206649538,4057449955536501641]}},{"file_name":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.30.0\\src/lib.rs","num":13,"id":{"name":"serde","disambiguator":[5226324604071714359,2769090089013413893]}},{"file_name":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.30.0\\src/lib.rs","num":14,"id":{"name":"viewport","disambiguator":[2240278429193483378,13033492938908557227]}},{"file_name":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.30.0\\src/lib.rs","num":15,"id":{"name":"float","disambiguator":[5884071758360582594,14915387271696833479]}}],"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":22860,"line_start":1,"line_end":708,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":40},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":1261,"byte_end":1269,"line_start":33,"line_end":33,"column_start":20,"column_end":28},"alias_span":null,"name":"NoWindow","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":22860,"line_start":1,"line_end":708,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\pistoncore-window-0.30.0\\src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":88},{"krate":0,"index":256},{"krate":0,"index":274},{"krate":0,"index":272},{"krate":0,"index":268},{"krate":0,"index":262},{"krate":0,"index":258},{"krate":0,"index":90},{"krate":0,"index":94},{"krate":0,"index":98},{"krate":0,"index":102},{"krate":0,"index":278},{"krate":0,"index":296},{"krate":0,"index":294},{"krate":0,"index":290},{"krate":0,"index":284},{"krate":0,"index":280},{"krate":0,"index":106},{"krate":0,"index":110},{"krate":0,"index":114},{"krate":0,"index":118},{"krate":0,"index":122},{"krate":0,"index":126},{"krate":0,"index":144},{"krate":0,"index":172},{"krate":0,"index":300},{"krate":0,"index":302},{"krate":0,"index":180}],"decl_id":null,"docs":" Window storage and interfacing traits.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"deny(missing_copy_implementations)","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":23,"byte_end":61,"line_start":2,"line_end":2,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":40},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,92,110,111,95,119,105,110,100,111,119,46,114,115],"byte_start":23543,"byte_end":23551,"line_start":20,"line_end":20,"column_start":12,"column_end":20},"name":"NoWindow","qualname":"::no_window::NoWindow","value":"NoWindow {  }","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":21},{"krate":0,"index":23},{"krate":0,"index":25}],"decl_id":null,"docs":" A window without user interface, often used in server event loops.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,92,110,111,95,119,105,110,100,111,119,46,114,115],"byte_start":23696,"byte_end":23699,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"new","qualname":"<NoWindow>::new","value":"fn (settings: &WindowSettings) -> NoWindow","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `NoWindow`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":88},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":1472,"byte_end":1483,"line_start":42,"line_end":42,"column_start":10,"column_end":21},"name":"ProcAddress","qualname":"::ProcAddress","value":"*const ()","parent":null,"children":[],"decl_id":null,"docs":" The type of an OpenGL function address.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":256},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":1924,"byte_end":1928,"line_start":53,"line_end":53,"column_start":12,"column_end":16},"name":"Size","qualname":"::Size","value":"Size { width, height }","parent":null,"children":[{"krate":0,"index":55},{"krate":0,"index":57}],"decl_id":null,"docs":" Structure to store the window size.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":1913,"byte_end":2012,"line_start":53,"line_end":58,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":1913,"byte_end":2012,"line_start":53,"line_end":58,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":55},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":1958,"byte_end":1963,"line_start":55,"line_end":55,"column_start":9,"column_end":14},"name":"width","qualname":"::Size::width","value":"u32","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":" The width.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":57},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":1998,"byte_end":2004,"line_start":57,"line_end":57,"column_start":9,"column_end":15},"name":"height","qualname":"::Size::height","value":"u32","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":" The height.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":278},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":3094,"byte_end":3102,"line_start":103,"line_end":103,"column_start":12,"column_end":20},"name":"Position","qualname":"::Position","value":"Position { x, y }","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":61}],"decl_id":null,"docs":" Structure to store the window position.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":3083,"byte_end":3190,"line_start":103,"line_end":108,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":3083,"byte_end":3190,"line_start":103,"line_end":108,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":59},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":3139,"byte_end":3140,"line_start":105,"line_end":105,"column_start":9,"column_end":10},"name":"x","qualname":"::Position::x","value":"i32","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" The x coordinate.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":61},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":3181,"byte_end":3182,"line_start":107,"line_end":107,"column_start":9,"column_end":10},"name":"y","qualname":"::Position::y","value":"i32","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" The y coordinate.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":122},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":4144,"byte_end":4167,"line_start":150,"line_end":150,"column_start":11,"column_end":34},"name":"BuildFromWindowSettings","qualname":"::BuildFromWindowSettings","value":"BuildFromWindowSettings: Sized","parent":null,"children":[{"krate":0,"index":124}],"decl_id":null,"docs":" Constructs a window from a [`WindowSettings`](./struct.WindowSettings.html)\n object.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":4416,"byte_end":4442,"line_start":157,"line_end":157,"column_start":8,"column_end":34},"name":"build_from_window_settings","qualname":"::BuildFromWindowSettings::build_from_window_settings","value":"fn (settings: &WindowSettings) -> Result<Self, String>","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" Builds the window from a `WindowSettings` object.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":126},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":4805,"byte_end":4811,"line_start":166,"line_end":166,"column_start":11,"column_end":17},"name":"Window","qualname":"::Window","value":"Window","parent":null,"children":[{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":142}],"decl_id":null,"docs":" Trait representing the minimum requirements for defining a window.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":4869,"byte_end":4885,"line_start":168,"line_end":168,"column_start":8,"column_end":24},"name":"set_should_close","qualname":"::Window::set_should_close","value":"fn (&mut self, value: bool) -> ()","parent":{"krate":0,"index":126},"children":[],"decl_id":null,"docs":" Tells the window to close or stay open.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":4968,"byte_end":4980,"line_start":171,"line_end":171,"column_start":8,"column_end":20},"name":"should_close","qualname":"::Window::should_close","value":"fn (&self) -> bool","parent":{"krate":0,"index":126},"children":[],"decl_id":null,"docs":" Returns true if the window should close.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":5042,"byte_end":5046,"line_start":174,"line_end":174,"column_start":8,"column_end":12},"name":"size","qualname":"::Window::size","value":"fn (&self) -> Size","parent":{"krate":0,"index":126},"children":[],"decl_id":null,"docs":" Gets the size of the window.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":5306,"byte_end":5318,"line_start":181,"line_end":181,"column_start":8,"column_end":20},"name":"swap_buffers","qualname":"::Window::swap_buffers","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":126},"children":[],"decl_id":null,"docs":" Swaps render buffers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":5417,"byte_end":5427,"line_start":184,"line_end":184,"column_start":8,"column_end":18},"name":"wait_event","qualname":"::Window::wait_event","value":"fn (&mut self) -> Input","parent":{"krate":0,"index":126},"children":[],"decl_id":null,"docs":" Wait indefinitely for an input event to be available from the window.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":5656,"byte_end":5674,"line_start":190,"line_end":190,"column_start":8,"column_end":26},"name":"wait_event_timeout","qualname":"::Window::wait_event_timeout","value":"fn (&mut self, timeout: Duration) -> Option<Input>","parent":{"krate":0,"index":126},"children":[],"decl_id":null,"docs":" Wait for an input event to be available from the window or for the\n specified timeout to be reached.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":5831,"byte_end":5841,"line_start":195,"line_end":195,"column_start":8,"column_end":18},"name":"poll_event","qualname":"::Window::poll_event","value":"fn (&mut self) -> Option<Input>","parent":{"krate":0,"index":126},"children":[],"decl_id":null,"docs":" Polls an input event from the window.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":6174,"byte_end":6183,"line_start":204,"line_end":204,"column_start":8,"column_end":17},"name":"draw_size","qualname":"::Window::draw_size","value":"fn (&self) -> Size","parent":{"krate":0,"index":126},"children":[],"decl_id":null,"docs":" Gets the draw size of the window.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":144},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":6512,"byte_end":6526,"line_start":213,"line_end":213,"column_start":11,"column_end":25},"name":"AdvancedWindow","qualname":"::AdvancedWindow","value":"AdvancedWindow: Window + Sized","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":170}],"decl_id":null,"docs":" Trait representing a window with the most features that are still generic.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":6600,"byte_end":6609,"line_start":215,"line_end":215,"column_start":8,"column_end":17},"name":"get_title","qualname":"::AdvancedWindow::get_title","value":"fn (&self) -> String","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Gets a copy of the title of the window.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":6674,"byte_end":6683,"line_start":218,"line_end":218,"column_start":8,"column_end":17},"name":"set_title","qualname":"::AdvancedWindow::set_title","value":"fn (&mut self, value: String) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Sets the title of the window.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":6912,"byte_end":6917,"line_start":225,"line_end":225,"column_start":8,"column_end":13},"name":"title","qualname":"::AdvancedWindow::title","value":"fn (mut self, value: String) -> Self","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Sets title on window.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":7100,"byte_end":7115,"line_start":233,"line_end":233,"column_start":8,"column_end":23},"name":"get_exit_on_esc","qualname":"::AdvancedWindow::get_exit_on_esc","value":"fn (&self) -> bool","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Gets whether to exit when pressing esc.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":7229,"byte_end":7244,"line_start":238,"line_end":238,"column_start":8,"column_end":23},"name":"set_exit_on_esc","qualname":"::AdvancedWindow::set_exit_on_esc","value":"fn (&mut self, value: bool) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Sets whether to exit when pressing esc.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":7553,"byte_end":7564,"line_start":247,"line_end":247,"column_start":8,"column_end":19},"name":"exit_on_esc","qualname":"::AdvancedWindow::exit_on_esc","value":"fn (mut self, value: bool) -> Self","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Sets whether to exit when pressing the Esc button.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":7831,"byte_end":7849,"line_start":256,"line_end":256,"column_start":8,"column_end":26},"name":"set_capture_cursor","qualname":"::AdvancedWindow::set_capture_cursor","value":"fn (&mut self, value: bool) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Sets whether to capture/grab the cursor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":8113,"byte_end":8127,"line_start":263,"line_end":263,"column_start":8,"column_end":22},"name":"capture_cursor","qualname":"::AdvancedWindow::capture_cursor","value":"fn (mut self, value: bool) -> Self","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Sets whether to capture/grab the cursor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":8333,"byte_end":8337,"line_start":271,"line_end":271,"column_start":8,"column_end":12},"name":"show","qualname":"::AdvancedWindow::show","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Shows the window.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":8463,"byte_end":8467,"line_start":276,"line_end":276,"column_start":8,"column_end":12},"name":"hide","qualname":"::AdvancedWindow::hide","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Hides the window.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":8595,"byte_end":8607,"line_start":281,"line_end":281,"column_start":8,"column_end":20},"name":"get_position","qualname":"::AdvancedWindow::get_position","value":"fn (&self) -> Option<Position>","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Gets the position of window.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":8751,"byte_end":8763,"line_start":286,"line_end":286,"column_start":8,"column_end":20},"name":"set_position","qualname":"::AdvancedWindow::set_position","value":"fn <P> (&mut self, val: P) -> ()","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Sets the position of window.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":9087,"byte_end":9095,"line_start":295,"line_end":295,"column_start":8,"column_end":16},"name":"position","qualname":"::AdvancedWindow::position","value":"fn <P> (mut self, val: P) -> Self","parent":{"krate":0,"index":144},"children":[],"decl_id":null,"docs":" Sets the position of window.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":172},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":9828,"byte_end":9840,"line_start":314,"line_end":314,"column_start":11,"column_end":23},"name":"OpenGLWindow","qualname":"::OpenGLWindow","value":"OpenGLWindow: Window","parent":null,"children":[{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178}],"decl_id":null,"docs":" Trait for OpenGL specific operations on a window.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":10008,"byte_end":10024,"line_start":318,"line_end":318,"column_start":8,"column_end":24},"name":"get_proc_address","qualname":"::OpenGLWindow::get_proc_address","value":"fn (&mut self, proc_name: &str) -> ProcAddress","parent":{"krate":0,"index":172},"children":[],"decl_id":null,"docs":" Returns the address of the specified OpenGL function if it exists.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":10153,"byte_end":10163,"line_start":321,"line_end":321,"column_start":8,"column_end":18},"name":"is_current","qualname":"::OpenGLWindow::is_current","value":"fn (&self) -> bool","parent":{"krate":0,"index":172},"children":[],"decl_id":null,"docs":" Returns true if this window's gl context is the current gl context.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":10249,"byte_end":10261,"line_start":324,"line_end":324,"column_start":8,"column_end":20},"name":"make_current","qualname":"::OpenGLWindow::make_current","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":172},"children":[],"decl_id":null,"docs":" Make the window's gl context the current gl context.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":300},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":10624,"byte_end":10638,"line_start":334,"line_end":334,"column_start":12,"column_end":26},"name":"WindowSettings","qualname":"::WindowSettings","value":"WindowSettings {  }","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":65},{"krate":0,"index":67},{"krate":0,"index":69},{"krate":0,"index":71},{"krate":0,"index":73},{"krate":0,"index":75},{"krate":0,"index":77},{"krate":0,"index":79},{"krate":0,"index":81},{"krate":0,"index":83}],"decl_id":null,"docs":" Settings structure for window behavior.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":11157,"byte_end":11160,"line_start":359,"line_end":359,"column_start":12,"column_end":15},"name":"new","qualname":"<WindowSettings>::new","value":"fn <T, S> (title: T, size: S) -> WindowSettings","parent":null,"children":[],"decl_id":null,"docs":" Creates window settings with defaults.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":12081,"byte_end":12086,"line_start":386,"line_end":386,"column_start":12,"column_end":17},"name":"build","qualname":"<WindowSettings>::build","value":"fn <W> (&self) -> Result<W, String>","parent":null,"children":[],"decl_id":null,"docs":" Builds window from the given settings.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":12270,"byte_end":12279,"line_start":391,"line_end":391,"column_start":12,"column_end":21},"name":"get_title","qualname":"<WindowSettings>::get_title","value":"fn (&self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Gets the title of built windows.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":12385,"byte_end":12394,"line_start":396,"line_end":396,"column_start":12,"column_end":21},"name":"set_title","qualname":"<WindowSettings>::set_title","value":"fn (&mut self, value: String) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the title of built windows.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":12671,"byte_end":12676,"line_start":405,"line_end":405,"column_start":12,"column_end":17},"name":"title","qualname":"<WindowSettings>::title","value":"fn (mut self, value: String) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the title of built windows.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":12814,"byte_end":12822,"line_start":411,"line_end":411,"column_start":12,"column_end":20},"name":"get_size","qualname":"<WindowSettings>::get_size","value":"fn (&self) -> Size","parent":null,"children":[],"decl_id":null,"docs":" Gets the size of built windows.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":12916,"byte_end":12924,"line_start":416,"line_end":416,"column_start":12,"column_end":20},"name":"set_size","qualname":"<WindowSettings>::set_size","value":"fn (&mut self, value: Size) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the size of built windows.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":13195,"byte_end":13199,"line_start":425,"line_end":425,"column_start":12,"column_end":16},"name":"size","qualname":"<WindowSettings>::size","value":"fn (mut self, value: Size) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the size of built windows.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":13349,"byte_end":13363,"line_start":431,"line_end":431,"column_start":12,"column_end":26},"name":"get_fullscreen","qualname":"<WindowSettings>::get_fullscreen","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Gets whether built windows will be fullscreen.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":13478,"byte_end":13492,"line_start":436,"line_end":436,"column_start":12,"column_end":26},"name":"set_fullscreen","qualname":"<WindowSettings>::set_fullscreen","value":"fn (&mut self, value: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows will be fullscreen.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":13796,"byte_end":13806,"line_start":445,"line_end":445,"column_start":12,"column_end":22},"name":"fullscreen","qualname":"<WindowSettings>::fullscreen","value":"fn (mut self, value: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows will be fullscreen.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":13983,"byte_end":13998,"line_start":451,"line_end":451,"column_start":12,"column_end":27},"name":"get_exit_on_esc","qualname":"<WindowSettings>::get_exit_on_esc","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Gets whether built windows should exit when the Esc key is pressed.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":14135,"byte_end":14150,"line_start":456,"line_end":456,"column_start":12,"column_end":27},"name":"set_exit_on_esc","qualname":"<WindowSettings>::set_exit_on_esc","value":"fn (&mut self, value: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should exit when the Esc key is pressed.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":14478,"byte_end":14489,"line_start":465,"line_end":465,"column_start":12,"column_end":23},"name":"exit_on_esc","qualname":"<WindowSettings>::exit_on_esc","value":"fn (mut self, value: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should exit when the Esc key is pressed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":14758,"byte_end":14769,"line_start":474,"line_end":474,"column_start":12,"column_end":23},"name":"get_samples","qualname":"<WindowSettings>::get_samples","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Gets the number of samples to use for anti-aliasing.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":14991,"byte_end":15002,"line_start":482,"line_end":482,"column_start":12,"column_end":23},"name":"set_samples","qualname":"<WindowSettings>::set_samples","value":"fn (&mut self, value: u8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the number of samples to use for anti-aliasing.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":15406,"byte_end":15413,"line_start":494,"line_end":494,"column_start":12,"column_end":19},"name":"samples","qualname":"<WindowSettings>::samples","value":"fn (mut self, value: u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the number of samples to use for anti-aliasing.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":15669,"byte_end":15678,"line_start":503,"line_end":503,"column_start":12,"column_end":21},"name":"get_vsync","qualname":"<WindowSettings>::get_vsync","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Gets whether built windows should use vsync.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":15893,"byte_end":15902,"line_start":511,"line_end":511,"column_start":12,"column_end":21},"name":"set_vsync","qualname":"<WindowSettings>::set_vsync","value":"fn (&mut self, value: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should use vsync.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":16296,"byte_end":16301,"line_start":523,"line_end":523,"column_start":12,"column_end":17},"name":"vsync","qualname":"<WindowSettings>::vsync","value":"fn (mut self, value: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should use vsync.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":16793,"byte_end":16809,"line_start":536,"line_end":536,"column_start":12,"column_end":28},"name":"get_maybe_opengl","qualname":"<WindowSettings>::get_maybe_opengl","value":"fn (&self) -> Option<OpenGL>","parent":null,"children":[],"decl_id":null,"docs":" Gets the OpenGL version of built windows.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":17259,"byte_end":17275,"line_start":548,"line_end":548,"column_start":12,"column_end":28},"name":"set_maybe_opengl","qualname":"<WindowSettings>::set_maybe_opengl","value":"fn (&mut self, value: Option<OpenGL>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets OpenGL version of built windows.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":17920,"byte_end":17932,"line_start":564,"line_end":564,"column_start":12,"column_end":24},"name":"maybe_opengl","qualname":"<WindowSettings>::maybe_opengl","value":"fn (mut self, value: Option<OpenGL>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets OpenGL version of built windows.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":18347,"byte_end":18357,"line_start":576,"line_end":576,"column_start":12,"column_end":22},"name":"set_opengl","qualname":"<WindowSettings>::set_opengl","value":"fn (&mut self, value: OpenGL) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets OpenGL version of built windows.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":18900,"byte_end":18906,"line_start":591,"line_end":591,"column_start":12,"column_end":18},"name":"opengl","qualname":"<WindowSettings>::opengl","value":"fn (mut self, value: OpenGL) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the OpenGL version of built windows.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":19529,"byte_end":19537,"line_start":606,"line_end":606,"column_start":12,"column_end":20},"name":"get_srgb","qualname":"<WindowSettings>::get_srgb","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Gets whether built windows should use hardware accelerated color conversion.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":19782,"byte_end":19790,"line_start":614,"line_end":614,"column_start":12,"column_end":20},"name":"set_srgb","qualname":"<WindowSettings>::set_srgb","value":"fn (&mut self, value: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should use hardware accelerated color conversion.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":20212,"byte_end":20216,"line_start":626,"line_end":626,"column_start":12,"column_end":16},"name":"srgb","qualname":"<WindowSettings>::srgb","value":"fn (mut self, value: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should use hardware accelerated color conversion.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":20367,"byte_end":20380,"line_start":632,"line_end":632,"column_start":12,"column_end":25},"name":"get_resizable","qualname":"<WindowSettings>::get_resizable","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Gets whether built windows should be resizable.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":20495,"byte_end":20508,"line_start":637,"line_end":637,"column_start":12,"column_end":25},"name":"set_resizable","qualname":"<WindowSettings>::set_resizable","value":"fn (&mut self, value: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should be resizable.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":20810,"byte_end":20819,"line_start":646,"line_end":646,"column_start":12,"column_end":21},"name":"resizable","qualname":"<WindowSettings>::resizable","value":"fn (mut self, value: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should be resizable.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":21201,"byte_end":21214,"line_start":658,"line_end":658,"column_start":12,"column_end":25},"name":"get_decorated","qualname":"<WindowSettings>::get_decorated","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Gets whether built windows should be decorated.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":21555,"byte_end":21568,"line_start":669,"line_end":669,"column_start":12,"column_end":25},"name":"set_decorated","qualname":"<WindowSettings>::set_decorated","value":"fn (&mut self, value: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should be decorated.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":22096,"byte_end":22105,"line_start":684,"line_end":684,"column_start":12,"column_end":21},"name":"decorated","qualname":"<WindowSettings>::decorated","value":"fn (mut self, value: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should be decorated.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":22275,"byte_end":22290,"line_start":690,"line_end":690,"column_start":12,"column_end":27},"name":"get_controllers","qualname":"<WindowSettings>::get_controllers","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Gets whether built windows should listen to controller input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":22421,"byte_end":22436,"line_start":695,"line_end":695,"column_start":12,"column_end":27},"name":"set_controllers","qualname":"<WindowSettings>::set_controllers","value":"fn (&mut self, value: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets whether built windows should listen to controller input.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":22758,"byte_end":22769,"line_start":704,"line_end":704,"column_start":12,"column_end":23},"name":"controllers","qualname":"<WindowSettings>::controllers","value":"fn (mut self, value: bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets whether build windows should listen to controller input.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,92,110,111,95,119,105,110,100,111,119,46,114,115],"byte_start":23640,"byte_end":23648,"line_start":27,"line_end":27,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,92,110,111,95,119,105,110,100,111,119,46,114,115],"byte_start":23950,"byte_end":23958,"line_start":39,"line_end":39,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,92,110,111,95,119,105,110,100,111,119,46,114,115],"byte_start":24580,"byte_end":24588,"line_start":71,"line_end":71,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,92,110,111,95,119,105,110,100,111,119,46,114,115],"byte_start":24828,"byte_end":24836,"line_start":80,"line_end":80,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":2038,"byte_end":2042,"line_start":60,"line_end":60,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":2225,"byte_end":2229,"line_start":70,"line_end":70,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":3216,"byte_end":3224,"line_start":110,"line_end":110,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":3406,"byte_end":3414,"line_start":120,"line_end":120,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":10872,"byte_end":10886,"line_start":348,"line_end":348,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":220},{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":234},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":240},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,92,110,111,95,119,105,110,100,111,119,46,114,115],"byte_start":23640,"byte_end":23648,"line_start":27,"line_end":27,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":40},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,92,110,111,95,119,105,110,100,111,119,46,114,115],"byte_start":23950,"byte_end":23958,"line_start":39,"line_end":39,"column_start":17,"column_end":25},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":40},"to":{"krate":0,"index":126}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,92,110,111,95,119,105,110,100,111,119,46,114,115],"byte_start":24580,"byte_end":24588,"line_start":71,"line_end":71,"column_start":34,"column_end":42},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":40},"to":{"krate":0,"index":122}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,92,110,111,95,119,105,110,100,111,119,46,114,115],"byte_start":24828,"byte_end":24836,"line_start":80,"line_end":80,"column_start":25,"column_end":33},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":40},"to":{"krate":0,"index":144}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":2038,"byte_end":2042,"line_start":60,"line_end":60,"column_start":25,"column_end":29},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":256},"to":{"krate":2,"index":2576}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":2225,"byte_end":2229,"line_start":70,"line_end":70,"column_start":27,"column_end":31},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":256},"to":{"krate":2,"index":2576}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":3216,"byte_end":3224,"line_start":110,"line_end":110,"column_start":25,"column_end":33},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":278},"to":{"krate":2,"index":2576}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":3406,"byte_end":3414,"line_start":120,"line_end":120,"column_start":27,"column_end":35},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":278},"to":{"krate":2,"index":2576}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":4169,"byte_end":4174,"line_start":150,"line_end":150,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":1660},"to":{"krate":0,"index":122}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":6528,"byte_end":6534,"line_start":213,"line_end":213,"column_start":27,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":126},"to":{"krate":0,"index":144}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":6537,"byte_end":6542,"line_start":213,"line_end":213,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":1660},"to":{"krate":0,"index":144}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":9842,"byte_end":9848,"line_start":314,"line_end":314,"column_start":25,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":126},"to":{"krate":0,"index":172}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,112,105,115,116,111,110,99,111,114,101,45,119,105,110,100,111,119,45,48,46,51,48,46,48,92,115,114,99,47,108,105,98,46,114,115],"byte_start":10872,"byte_end":10886,"line_start":348,"line_end":348,"column_start":6,"column_end":20},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":300},"to":{"krate":4294967295,"index":4294967295}}]}