{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52],"program":"C:\\Users\\wesle\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","inflate","C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.3.4\\src\\lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","-C","metadata=cbed47de9d6e86dd","-C","extra-filename=-cbed47de9d6e86dd","--out-dir","c:\\dev\\rusty_chip8\\target\\rls\\debug\\deps","-L","dependency=c:\\dev\\rusty_chip8\\target\\rls\\debug\\deps","--extern","adler32=c:\\dev\\rusty_chip8\\target\\rls\\debug\\deps\\libadler32-8c53fdd13d410279.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\wesle\\.rustup/toolchains/nightly-x86_64-pc-windows-msvc"],"output":[99,58,92,100,101,118,92,114,117,115,116,121,95,99,104,105,112,56,92,116,97,114,103,101,116,92,114,108,115,92,100,101,98,117,103,92,100,101,112,115,92,108,105,98,105,110,102,108,97,116,101,45,99,98,101,100,52,55,100,101,57,100,54,101,56,54,100,100,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"inflate","disambiguator":[177662750327531783,13444676680053698151]},"crate_root":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.3.4\\src","external_crates":[{"file_name":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.3.4\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[3784487664057646013,678548526651553166]}},{"file_name":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.3.4\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[1505932620191740712,11960304689474218604]}},{"file_name":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.3.4\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[2202162966358352520,1540765826685291309]}},{"file_name":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.3.4\\src\\lib.rs","num":4,"id":{"name":"alloc","disambiguator":[12552742427542554725,7527797743935281662]}},{"file_name":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.3.4\\src\\lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[12920973381183166857,17954846533137630814]}},{"file_name":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.3.4\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[6208075755453667876,3365686514671849673]}},{"file_name":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.3.4\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3065543516588579103,11955528504649856325]}},{"file_name":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.3.4\\src\\lib.rs","num":8,"id":{"name":"panic_unwind","disambiguator":[10971241147940616326,6897541715392330182]}},{"file_name":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.3.4\\src\\lib.rs","num":9,"id":{"name":"adler32","disambiguator":[5748399898851837393,9204928540934575857]}}],"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,108,105,98,46,114,115],"byte_start":432,"byte_end":42523,"line_start":10,"line_end":1058,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":58},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2928,"byte_end":2941,"line_start":79,"line_end":79,"column_start":24,"column_end":37},"alias_span":null,"name":"InflateWriter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":86},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2978,"byte_end":2991,"line_start":82,"line_end":82,"column_start":23,"column_end":36},"alias_span":null,"name":"inflate_bytes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":88},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,108,105,98,46,114,115],"byte_start":2993,"byte_end":3011,"line_start":82,"line_end":82,"column_start":38,"column_end":56},"alias_span":null,"name":"inflate_bytes_zlib","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":90},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,108,105,98,46,114,115],"byte_start":3013,"byte_end":3043,"line_start":82,"line_end":82,"column_start":58,"column_end":88},"alias_span":null,"name":"inflate_bytes_zlib_no_checksum","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":160},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,108,105,98,46,114,115],"byte_start":3082,"byte_end":3096,"line_start":85,"line_end":85,"column_start":24,"column_end":38},"alias_span":null,"name":"DeflateDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":128},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,108,105,98,46,114,115],"byte_start":3098,"byte_end":3115,"line_start":85,"line_end":85,"column_start":40,"column_end":57},"alias_span":null,"name":"DeflateDecoderBuf","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,108,105,98,46,114,115],"byte_start":432,"byte_end":42523,"line_start":10,"line_end":1058,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\wesle\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\inflate-0.3.4\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":38},{"krate":0,"index":44},{"krate":0,"index":76},{"krate":0,"index":80},{"krate":0,"index":92},{"krate":0,"index":100},{"krate":0,"index":192},{"krate":0,"index":198},{"krate":0,"index":300},{"krate":0,"index":304},{"krate":0,"index":302},{"krate":0,"index":308},{"krate":0,"index":310},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":240},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":256}],"decl_id":null,"docs":" A [DEFLATE](http://www.gzip.org/zlib/rfc-deflate.html) decoder written in rust.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":58},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,119,114,105,116,101,114,46,114,115],"byte_start":45309,"byte_end":45322,"line_start":22,"line_end":22,"column_start":12,"column_end":25},"name":"InflateWriter","qualname":"::writer::InflateWriter","value":"InflateWriter {  }","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":33}],"decl_id":null,"docs":" A DEFLATE decoder.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,119,114,105,116,101,114,46,114,115],"byte_start":45426,"byte_end":45429,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"new","qualname":"<InflateWriter<W>>::new","value":"fn (w: W) -> InflateWriter<W>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,119,114,105,116,101,114,46,114,115],"byte_start":45544,"byte_end":45553,"line_start":32,"line_end":32,"column_start":12,"column_end":21},"name":"from_zlib","qualname":"<InflateWriter<W>>::from_zlib","value":"fn (w: W) -> InflateWriter<W>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,119,114,105,116,101,114,46,114,115],"byte_start":45674,"byte_end":45680,"line_start":36,"line_end":36,"column_start":12,"column_end":18},"name":"finish","qualname":"<InflateWriter<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":86},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,117,116,105,108,115,46,114,115],"byte_start":48220,"byte_end":48233,"line_start":31,"line_end":31,"column_start":8,"column_end":21},"name":"inflate_bytes","qualname":"::utils::inflate_bytes","value":"fn (data: &[u8]) -> Result<Vec<u8>, String>","parent":null,"children":[],"decl_id":null,"docs":" Decompress the given slice of DEFLATE compressed data.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":88},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,117,116,105,108,115,46,114,115],"byte_start":48495,"byte_end":48513,"line_start":38,"line_end":38,"column_start":8,"column_end":26},"name":"inflate_bytes_zlib","qualname":"::utils::inflate_bytes_zlib","value":"fn (data: &[u8]) -> Result<Vec<u8>, String>","parent":null,"children":[],"decl_id":null,"docs":" Decompress the given slice of DEFLATE compressed (with zlib headers and trailers) data.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":90},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,117,116,105,108,115,46,114,115],"byte_start":48834,"byte_end":48864,"line_start":46,"line_end":46,"column_start":8,"column_end":38},"name":"inflate_bytes_zlib_no_checksum","qualname":"::utils::inflate_bytes_zlib_no_checksum","value":"fn (data: &[u8]) -> Result<Vec<u8>, String>","parent":null,"children":[],"decl_id":null,"docs":" Decompress the given slice of DEFLATE compressed (with zlib headers and trailers) data,\n without calculating and validating the checksum.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":128},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":51298,"byte_end":51315,"line_start":32,"line_end":32,"column_start":12,"column_end":29},"name":"DeflateDecoderBuf","qualname":"::reader::DeflateDecoderBuf","value":"DeflateDecoderBuf {  }","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":47},{"krate":0,"index":49},{"krate":0,"index":51},{"krate":0,"index":53}],"decl_id":null,"docs":" A DEFLATE decoder/decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":51836,"byte_end":51839,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateDecoderBuf<R>>::new","value":"fn (reader: R) -> DeflateDecoderBuf<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Deflatedecoderbuf` to read from a raw deflate stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":52185,"byte_end":52194,"line_start":58,"line_end":58,"column_start":12,"column_end":21},"name":"from_zlib","qualname":"<DeflateDecoderBuf<R>>::from_zlib","value":"fn (reader: R) -> DeflateDecoderBuf<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `DeflateDecoderbuf` that reads from a zlib wrapped deflate stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":52603,"byte_end":52624,"line_start":70,"line_end":70,"column_start":12,"column_end":33},"name":"from_zlib_no_checksum","qualname":"<DeflateDecoderBuf<R>>::from_zlib_no_checksum","value":"fn (reader: R) -> DeflateDecoderBuf<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `DeflateDecoderbuf` that reads from a zlib wrapped deflate stream.\n without calculating and validating the checksum.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":53171,"byte_end":53176,"line_start":87,"line_end":87,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateDecoderBuf<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the decompressor, and replaces the current inner `BufRead` instance by `r`.\n without doing any extra reallocations.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":53150,"byte_end":53159,"line_start":86,"line_end":86,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":53467,"byte_end":53477,"line_start":96,"line_end":96,"column_start":12,"column_end":22},"name":"reset_data","qualname":"<DeflateDecoderBuf<R>>::reset_data","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Resets the decoder, but continue to read from the same reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":53446,"byte_end":53455,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":53623,"byte_end":53630,"line_start":102,"line_end":102,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateDecoderBuf<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying `BufRead` instance.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":53602,"byte_end":53611,"line_start":101,"line_end":101,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":53903,"byte_end":53910,"line_start":111,"line_end":111,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateDecoderBuf<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying `BufRead` instance.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":53882,"byte_end":53891,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":54144,"byte_end":54154,"line_start":119,"line_end":119,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateDecoderBuf<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Drops the decoder and return the inner `BufRead` instance.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":54123,"byte_end":54132,"line_start":118,"line_end":118,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":54297,"byte_end":54305,"line_start":125,"line_end":125,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateDecoderBuf<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total bytes read from the underlying `BufRead` instance.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":54276,"byte_end":54285,"line_start":124,"line_end":124,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":54444,"byte_end":54453,"line_start":131,"line_end":131,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateDecoderBuf<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of bytes output from this decoder.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":54423,"byte_end":54432,"line_start":130,"line_end":130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":54679,"byte_end":54695,"line_start":139,"line_end":139,"column_start":12,"column_end":28},"name":"current_checksum","qualname":"<DeflateDecoderBuf<R>>::current_checksum","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the calculated checksum value of the currently decoded data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":54658,"byte_end":54667,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":160},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":58415,"byte_end":58429,"line_start":233,"line_end":233,"column_start":12,"column_end":26},"name":"DeflateDecoder","qualname":"::reader::DeflateDecoder","value":"DeflateDecoder {  }","parent":null,"children":[{"krate":0,"index":63}],"decl_id":null,"docs":" A DEFLATE decoder/decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":58668,"byte_end":58671,"line_start":240,"line_end":240,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateDecoder<R>>::new","value":"fn (reader: R) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Deflatedecoderbuf` to read from a raw deflate stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":58913,"byte_end":58922,"line_start":247,"line_end":247,"column_start":12,"column_end":21},"name":"from_zlib","qualname":"<DeflateDecoder<R>>::from_zlib","value":"fn (reader: R) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `DeflateDecoderbuf` that reads from a zlib wrapped deflate stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":59227,"byte_end":59248,"line_start":255,"line_end":255,"column_start":12,"column_end":33},"name":"from_zlib_no_checksum","qualname":"<DeflateDecoder<R>>::from_zlib_no_checksum","value":"fn (reader: R) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `DeflateDecoderbuf` that reads from a zlib wrapped deflate stream.\n without calculating and validating the checksum.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":59658,"byte_end":59663,"line_start":266,"line_end":266,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateDecoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the decompressor, and replaces the current inner `BufRead` instance by `r`.\n without doing any extra reallocations.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":59637,"byte_end":59646,"line_start":265,"line_end":265,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":59831,"byte_end":59838,"line_start":272,"line_end":272,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":59810,"byte_end":59819,"line_start":271,"line_end":271,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":60117,"byte_end":60124,"line_start":281,"line_end":281,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":60096,"byte_end":60105,"line_start":280,"line_end":280,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":60287,"byte_end":60297,"line_start":287,"line_end":287,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of bytes output from this decoder.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":60266,"byte_end":60275,"line_start":286,"line_end":286,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":60575,"byte_end":60585,"line_start":297,"line_end":297,"column_start":12,"column_end":22},"name":"reset_data","qualname":"<DeflateDecoder<R>>::reset_data","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Resets the decoder, but continue to read from the same reader.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":60554,"byte_end":60563,"line_start":296,"line_end":296,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":60728,"byte_end":60736,"line_start":303,"line_end":303,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateDecoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total bytes read from the underlying reader.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":60707,"byte_end":60716,"line_start":302,"line_end":302,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":60881,"byte_end":60890,"line_start":309,"line_end":309,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateDecoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of bytes output from this decoder.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":60860,"byte_end":60869,"line_start":308,"line_end":308,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":61122,"byte_end":61138,"line_start":317,"line_end":317,"column_start":12,"column_end":28},"name":"current_checksum","qualname":"<DeflateDecoder<R>>::current_checksum","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the calculated checksum value of the currently decoded data.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":61101,"byte_end":61110,"line_start":316,"line_end":316,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":254},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,108,105,98,46,114,115],"byte_start":20095,"byte_end":20108,"line_start":570,"line_end":570,"column_start":12,"column_end":25},"name":"InflateStream","qualname":"::InflateStream","value":"InflateStream {  }","parent":null,"children":[{"krate":0,"index":197},{"krate":0,"index":199},{"krate":0,"index":201},{"krate":0,"index":203},{"krate":0,"index":205},{"krate":0,"index":207}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,108,105,98,46,114,115],"byte_start":20377,"byte_end":20380,"line_start":582,"line_end":582,"column_start":12,"column_end":15},"name":"new","qualname":"<InflateStream>::new","value":"fn () -> InflateStream","parent":null,"children":[],"decl_id":null,"docs":" Create a new stream for decoding raw deflate encoded data.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,108,105,98,46,114,115],"byte_start":20279,"byte_end":20298,"line_start":580,"line_end":580,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,108,105,98,46,114,115],"byte_start":20706,"byte_end":20715,"line_start":589,"line_end":589,"column_start":12,"column_end":21},"name":"from_zlib","qualname":"<InflateStream>::from_zlib","value":"fn () -> InflateStream","parent":null,"children":[],"decl_id":null,"docs":" Create a new stream for decoding deflate encoded data with a zlib header and footer\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,108,105,98,46,114,115],"byte_start":21094,"byte_end":21115,"line_start":597,"line_end":597,"column_start":12,"column_end":33},"name":"from_zlib_no_checksum","qualname":"<InflateStream>::from_zlib_no_checksum","value":"fn () -> InflateStream","parent":null,"children":[],"decl_id":null,"docs":" Create a new stream for decoding deflate encoded data with a zlib header and footer","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,108,105,98,46,114,115],"byte_start":21250,"byte_end":21255,"line_start":601,"line_end":601,"column_start":12,"column_end":17},"name":"reset","qualname":"<InflateStream>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,108,105,98,46,114,115],"byte_start":21443,"byte_end":21456,"line_start":608,"line_end":608,"column_start":12,"column_end":25},"name":"reset_to_zlib","qualname":"<InflateStream>::reset_to_zlib","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,108,105,98,46,114,115],"byte_start":41359,"byte_end":41365,"line_start":1025,"line_end":1025,"column_start":12,"column_end":18},"name":"update","qualname":"<InflateStream>::update","value":"fn <'a> (&'a mut self, mut data: &[u8]) -> Result<(usize, &'a [u8]), String>","parent":null,"children":[],"decl_id":null,"docs":" Try to uncompress/decode the data in `data`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,108,105,98,46,114,115],"byte_start":42445,"byte_end":42461,"line_start":1055,"line_end":1055,"column_start":12,"column_end":28},"name":"current_checksum","qualname":"<InflateStream>::current_checksum","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the calculated checksum value of the currently decoded data.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,99,104,101,99,107,115,117,109,46,114,115],"byte_start":43121,"byte_end":43129,"line_start":25,"line_end":25,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,119,114,105,116,101,114,46,114,115],"byte_start":45396,"byte_end":45409,"line_start":27,"line_end":27,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,119,114,105,116,101,114,46,114,115],"byte_start":46023,"byte_end":46036,"line_start":48,"line_end":48,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":51726,"byte_end":51743,"line_start":45,"line_end":45,"column_start":18,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":52899,"byte_end":52916,"line_start":81,"line_end":81,"column_start":9,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":54792,"byte_end":54809,"line_start":144,"line_end":144,"column_start":27,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":58561,"byte_end":58575,"line_start":238,"line_end":238,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":60373,"byte_end":60387,"line_start":292,"line_end":292,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":61225,"byte_end":61239,"line_start":322,"line_end":322,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,108,105,98,46,114,115],"byte_start":7301,"byte_end":7310,"line_start":200,"line_end":200,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,108,105,98,46,114,115],"byte_start":11510,"byte_end":11526,"line_start":341,"line_end":341,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,108,105,98,46,114,115],"byte_start":14635,"byte_end":14647,"line_start":431,"line_end":431,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,108,105,98,46,114,115],"byte_start":20259,"byte_end":20272,"line_start":579,"line_end":579,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":268},{"krate":0,"index":270},{"krate":0,"index":272},{"krate":0,"index":296},{"krate":0,"index":298}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,99,104,101,99,107,115,117,109,46,114,115],"byte_start":43121,"byte_end":43129,"line_start":25,"line_end":25,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":20},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,119,114,105,116,101,114,46,114,115],"byte_start":45396,"byte_end":45409,"line_start":27,"line_end":27,"column_start":16,"column_end":29},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":58},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,119,114,105,116,101,114,46,114,115],"byte_start":46023,"byte_end":46036,"line_start":48,"line_end":48,"column_start":26,"column_end":39},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":58},"to":{"krate":1,"index":4256}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":51726,"byte_end":51743,"line_start":45,"line_end":45,"column_start":18,"column_end":35},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":128},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":52899,"byte_end":52916,"line_start":81,"line_end":81,"column_start":9,"column_end":26},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":128},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":54792,"byte_end":54809,"line_start":144,"line_end":144,"column_start":27,"column_end":44},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":128},"to":{"krate":1,"index":4226}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":58561,"byte_end":58575,"line_start":238,"line_end":238,"column_start":15,"column_end":29},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":160},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":60373,"byte_end":60387,"line_start":292,"line_end":292,"column_start":9,"column_end":23},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":160},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,114,101,97,100,101,114,46,114,115],"byte_start":61225,"byte_end":61239,"line_start":322,"line_end":322,"column_start":24,"column_end":38},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":160},"to":{"krate":1,"index":4226}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,108,105,98,46,114,115],"byte_start":7301,"byte_end":7310,"line_start":200,"line_end":200,"column_start":10,"column_end":19},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":308},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,108,105,98,46,114,115],"byte_start":11510,"byte_end":11526,"line_start":341,"line_end":341,"column_start":6,"column_end":22},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":224},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,108,105,98,46,114,115],"byte_start":14635,"byte_end":14647,"line_start":431,"line_end":431,"column_start":6,"column_end":18},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":238},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[67,58,92,85,115,101,114,115,92,119,101,115,108,101,92,46,99,97,114,103,111,92,114,101,103,105,115,116,114,121,92,115,114,99,92,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,92,105,110,102,108,97,116,101,45,48,46,51,46,52,92,115,114,99,92,108,105,98,46,114,115],"byte_start":20259,"byte_end":20272,"line_start":579,"line_end":579,"column_start":6,"column_end":19},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":254},"to":{"krate":4294967295,"index":4294967295}}]}